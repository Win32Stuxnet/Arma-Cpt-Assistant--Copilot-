const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ AI Assistant Bridge Service Setup\n');

const questions = [
  {
    key: 'PORT',
    question: 'Server port (default: 3001): ',
    default: '3001'
  },
  {
    key: 'ARMA_PROFILE_PATH',
    question: 'Arma Reforger profile path: ',
    default: process.platform === 'win32' 
      ? 'C:/Users/' + require('os').userInfo().username + '/AppData/Local/ArmaReforger/profile/'
      : '~/.local/share/ArmaReforger/profile/'
  },
  {
    key: 'CLAUDE_API_KEY',
    question: 'Claude API key (optional): ',
    default: ''
  },
  {
    key: 'OPENAI_API_KEY', 
    question: 'OpenAI API key (optional): ',
    default: ''
  }
];

const config = {};

async function askQuestion(questionObj) {
  return new Promise((resolve) => {
    rl.question(questionObj.question, (answer) => {
      config[questionObj.key] = answer.trim() || questionObj.default;
      resolve();
    });
  });
}

async function setup() {
  console.log('Please provide the following configuration:\n');
  
  for (const question of questions) {
    await askQuestion(question);
  }
  
  // Generate .env file
  let envContent = '# AI Bridge Service Configuration\n';
  envContent += '# Generated by setup script\n\n';
  
  for (const [key, value] of Object.entries(config)) {
    envContent += `${key}=${value}\n`;
  }
  
  envContent += '\n# Logging Level (error, warn, info, debug)\n';
  envContent += 'LOG_LEVEL=info\n\n';
  
  envContent += '# Rate Limiting (requests per minute)\n';
  envContent += 'CLAUDE_RATE_LIMIT=100\n';
  envContent += 'OPENAI_RATE_LIMIT=60\n';
  envContent += 'OLLAMA_RATE_LIMIT=1000\n\n';
  
  envContent += '# Request Timeout (milliseconds)\n';
  envContent += 'REQUEST_TIMEOUT=60000\n';
  
  fs.writeFileSync('.env', envContent);
  
  // Create profile directory if it doesn't exist
  const profilePath = config.ARMA_PROFILE_PATH.replace(/['"]/g, '');
  if (!fs.existsSync(profilePath)) {
    try {
      fs.mkdirSync(profilePath, { recursive: true });
      console.log(`‚úÖ Created profile directory: ${profilePath}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è Could not create profile directory: ${error.message}`);
    }
  }
  
  console.log('\n‚úÖ Setup completed successfully!');
  console.log('\nConfiguration saved to .env file');
  console.log('\nNext steps:');
  console.log('1. Run: npm install');
  console.log('2. Start service: npm start');
  console.log('3. Configure Arma plugin to use this bridge service');
  
  if (!config.CLAUDE_API_KEY && !config.OPENAI_API_KEY) {
    console.log('\n‚ö†Ô∏è Warning: No AI API keys provided.');
    console.log('   You can add them to the .env file later or use a local model (Ollama)');
  }
  
  rl.close();
}

setup().catch(console.error);